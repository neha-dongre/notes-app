{"ast":null,"code":"var _jsxFileName = \"/home/lenon/notes-app/src/components/Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styles from './ChatApp.module.css'; // Update your CSS styles\n\n// Create a Contact component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Contact({\n  contact,\n  onSelectContact\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.contact,\n    onClick: () => onSelectContact(contact),\n    children: contact.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\n// Create a Message component\n_c = Contact;\nfunction Message({\n  message\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.message,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.messageContent,\n      children: message.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.timestamp,\n      children: message.timestamp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n\n// Main ChatApp component\n_c2 = Message;\nexport default function ChatApp() {\n  _s();\n  // Define contacts and selectedContact here\n  const [contacts, setContacts] = useState([{\n    id: 1,\n    name: 'Contact 1'\n  }, {\n    id: 2,\n    name: 'Contact 2'\n  }, {\n    id: 3,\n    name: 'Contact 3'\n  }]);\n  const [selectedContact, setSelectedContact] = useState(null);\n\n  // Define a function for handling contact selection\n  const handleContactSelect = contact => {\n    setSelectedContact(contact);\n    // Load messages for the selected contact (you can fetch messages here).\n  };\n\n  // Define a function for sending messages\n  const handleSendMessage = messageText => {\n    // Send the message to the selected contact (you can implement this logic).\n    const newMessage = {\n      content: messageText,\n      timestamp: new Date().toLocaleString()\n    };\n\n    // Update the messages state with the new message\n    // (you can use your existing messages state handling logic here)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chatApp,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.contacts,\n      children: contacts.map(contact => /*#__PURE__*/_jsxDEV(Contact, {\n        contact: contact,\n        onSelectContact: handleContactSelect\n      }, contact.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.messages,\n      children: [selectedContact && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.messageContainer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), selectedContact && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.messageInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatApp, \"8nNnrXmyDjlIgDI40HhVlJNE3nY=\");\n_c3 = ChatApp;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Contact\");\n$RefreshReg$(_c2, \"Message\");\n$RefreshReg$(_c3, \"ChatApp\");","map":{"version":3,"names":["React","useState","styles","jsxDEV","_jsxDEV","Contact","contact","onSelectContact","className","onClick","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","Message","message","messageContent","content","timestamp","_c2","ChatApp","_s","contacts","setContacts","id","selectedContact","setSelectedContact","handleContactSelect","handleSendMessage","messageText","newMessage","Date","toLocaleString","chatApp","map","messages","messageContainer","messageInput","_c3","$RefreshReg$"],"sources":["/home/lenon/notes-app/src/components/Chat.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styles from './ChatApp.module.css'; // Update your CSS styles\n\n// Create a Contact component\nfunction Contact({ contact, onSelectContact }) {\n  return (\n    <div className={styles.contact} onClick={() => onSelectContact(contact)}>\n      {contact.name}\n    </div>\n  );\n}\n\n// Create a Message component\nfunction Message({ message }) {\n  return (\n    <div className={styles.message}>\n      <div className={styles.messageContent}>{message.content}</div>\n      <div className={styles.timestamp}>{message.timestamp}</div>\n    </div>\n  );\n}\n\n// Main ChatApp component\nexport default function ChatApp() {\n  // Define contacts and selectedContact here\n  const [contacts, setContacts] = useState([\n    { id: 1, name: 'Contact 1' },\n    { id: 2, name: 'Contact 2' },\n    { id: 3, name: 'Contact 3' },\n  ]);\n  const [selectedContact, setSelectedContact] = useState(null);\n\n  // Define a function for handling contact selection\n  const handleContactSelect = (contact) => {\n    setSelectedContact(contact);\n    // Load messages for the selected contact (you can fetch messages here).\n  };\n\n  // Define a function for sending messages\n  const handleSendMessage = (messageText) => {\n    // Send the message to the selected contact (you can implement this logic).\n    const newMessage = {\n      content: messageText,\n      timestamp: new Date().toLocaleString(),\n    };\n\n    // Update the messages state with the new message\n    // (you can use your existing messages state handling logic here)\n  };\n\n  return (\n    <div className={styles.chatApp}>\n      <div className={styles.contacts}>\n        {/* Display contacts on the left side */}\n        {contacts.map((contact) => (\n          <Contact key={contact.id} contact={contact} onSelectContact={handleContactSelect} />\n        ))}\n      </div>\n      <div className={styles.messages}>\n        {/* Display messages on the right side */}\n        {selectedContact && (\n          <div className={styles.messageContainer}>\n            {/* Display messages for the selected contact */}\n          </div>\n        )}\n        {selectedContact && (\n          <div className={styles.messageInput}>\n            {/* Add an input field and send button for sending messages */}\n            {/* You can use your existing input and button code here */}\n          </div>\n        )}\n      </div>\n\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}