{"ast":null,"code":"var _jsxFileName = \"/home/lenon/notes-app/src/components/Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styles from './ChatApp.module.css'; // Update your CSS styles\n// import styles from './ChatApp.module.css';\nimport lock from '../assets/Vector.png';\nimport bgImage from '../assets/bgimage.png';\nimport createGroupIcon from '../assets/+.png';\nimport Popup from './Popup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  const [contacts, setContacts] = useState([]); // Replace this with your contact/note data\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [newMessageText, setNewMessageText] = useState('');\n  const [isPopupOpen, setIsPopupOpen] = useState(false); // State to manage the popup\n\n  const openPopup = () => {\n    setIsPopupOpen(true);\n  };\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n\n  // Function to create a new message/note\n  const createMessage = () => {\n    if (selectedContact) {\n      // Create a new message/note object\n      const newMessage = {\n        content: newMessageText,\n        sender: 'User',\n        // You can change this to the sender's name\n        timestamp: new Date().toLocaleString() // Current date and time\n      };\n\n      // Add the new message/note to the selected contact's notes\n      const updatedContacts = contacts.map(contact => {\n        if (contact.id === selectedContact.id) {\n          return {\n            ...contact,\n            notes: [...contact.notes, newMessage]\n          };\n        }\n        return contact;\n      });\n      setContacts(updatedContacts);\n      setNewMessageText('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chatApp,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.contacts,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Pocket Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: Style.groupbtn,\n          onClick: () => {\n            const groupName = openPopup(); // You can replace this with your own popup logic\n            if (groupName) {\n              handleCreateGroup(groupName);\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: createGroupIcon,\n            alt: \"Create Notes Group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), \"Create Notes Group\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), contacts.map(contact => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.contact} ${selectedContact && selectedContact.id === contact.id ? styles.selectedContact : ''}`,\n        onClick: () => setSelectedContact(contact),\n        children: contact.name\n      }, contact.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.messages,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: isPopupOpen ? styles.hiddenContent : '',\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: bgImage,\n          alt: bgImage,\n          className: styles.bgImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.pocketnotes,\n          children: \"Pocket Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.description,\n          children: [\"Send and receive messages without keeping your phone online.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), \"Use Pocket Notes on up to 4 linked devices and 1 mobile phone\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.FooterContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: lock,\n            alt: \"lock\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"end-to-end encrypted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), selectedContact && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.messageContainer,\n          children: selectedContact.notes.map((note, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${note.sender === 'User' ? styles.sentMessage : styles.receivedMessage}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.messageContent,\n              children: note.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.timestamp,\n              children: note.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), selectedContact && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.messageInput,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type your message here...\",\n            value: newMessageText,\n            onChange: e => setNewMessageText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: createMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), isPopupOpen && /*#__PURE__*/_jsxDEV(Popup, {\n        isPopupOpen: isPopupOpen,\n        closePopup: closePopup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"Osxx6/5pzp8x/adpc+1ulFnKlgk=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","styles","lock","bgImage","createGroupIcon","Popup","jsxDEV","_jsxDEV","ChatApp","_s","contacts","setContacts","selectedContact","setSelectedContact","newMessageText","setNewMessageText","isPopupOpen","setIsPopupOpen","openPopup","closePopup","createMessage","newMessage","content","sender","timestamp","Date","toLocaleString","updatedContacts","map","contact","id","notes","className","chatApp","children","fileName","_jsxFileName","lineNumber","columnNumber","Style","groupbtn","onClick","groupName","handleCreateGroup","src","alt","name","messages","hiddenContent","pocketnotes","description","FooterContainer","messageContainer","note","index","sentMessage","receivedMessage","messageContent","messageInput","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/home/lenon/notes-app/src/components/Chat.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styles from './ChatApp.module.css'; // Update your CSS styles\n// import styles from './ChatApp.module.css';\nimport lock from '../assets/Vector.png';\nimport bgImage from '../assets/bgimage.png';\nimport createGroupIcon from '../assets/+.png';\nimport Popup from './Popup';\n\n\nconst ChatApp = () => {\n  const [contacts, setContacts] = useState([]); // Replace this with your contact/note data\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [newMessageText, setNewMessageText] = useState('');\n  const [isPopupOpen, setIsPopupOpen] = useState(false); // State to manage the popup\n\n  const openPopup = () => {\n    setIsPopupOpen(true);\n  };\n\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n\n  // Function to create a new message/note\n  const createMessage = () => {\n    if (selectedContact) {\n      // Create a new message/note object\n      const newMessage = {\n        content: newMessageText,\n        sender: 'User', // You can change this to the sender's name\n        timestamp: new Date().toLocaleString(), // Current date and time\n      };\n\n      // Add the new message/note to the selected contact's notes\n      const updatedContacts = contacts.map((contact) => {\n        if (contact.id === selectedContact.id) {\n          return {\n            ...contact,\n            notes: [...contact.notes, newMessage],\n          };\n        }\n        return contact;\n      });\n\n      setContacts(updatedContacts);\n      setNewMessageText('');\n    }\n  };\n\n  return (\n    <div className={styles.chatApp}>\n      <div className={styles.contacts}>\n        {/* Display contacts/people as notes on the left side */}\n        <div className=\"group-container\">\n        <h1>Pocket Notes</h1>\n          <button\n            className={Style.groupbtn}\n            onClick={() => {\n              const groupName = openPopup(); // You can replace this with your own popup logic\n              if (groupName) {\n                handleCreateGroup(groupName);\n              }\n            }}\n          >\n            <img src={createGroupIcon} alt=\"Create Notes Group\" />\n            Create Notes Group\n          </button>\n      </div>\n        {contacts.map((contact) => (         \n          <div\n            key={contact.id}\n            className={`${styles.contact} ${\n              selectedContact && selectedContact.id === contact.id\n                ? styles.selectedContact\n                : ''\n            }`}\n            onClick={() => setSelectedContact(contact)}\n          >\n            {contact.name}\n          </div>\n        ))}\n      </div>\n      <div className={styles.messages}>\n      <div className= {isPopupOpen ? styles.hiddenContent : ''}>\n        {/* Display messages/notes on the right side */}\n        <img src={bgImage} alt={bgImage} className={styles.bgImage} />\n            <p className={styles.pocketnotes}>Pocket Notes</p>\n            <p className={styles.description}>\n              Send and receive messages without keeping your phone online.\n              <br />\n              Use Pocket Notes on up to 4 linked devices and 1 mobile phone\n            </p>\n            <div className={styles.FooterContainer}>\n              <img src={lock} alt=\"lock\" />\n              <p>end-to-end encrypted</p>\n            </div>\n        {selectedContact && (\n          <div className={styles.messageContainer}>\n            {selectedContact.notes.map((note, index) => (\n              <div\n                key={index}\n                className={`${\n                  note.sender === 'User' ? styles.sentMessage : styles.receivedMessage\n                }`}\n              >\n                <div className={styles.messageContent}>{note.content}</div>\n                <div className={styles.timestamp}>{note.timestamp}</div>\n              </div>\n            ))}\n          </div>\n        )}\n        {selectedContact && (\n          <div className={styles.messageInput}>\n            <input\n              type=\"text\"\n              placeholder=\"Type your message here...\"\n              value={newMessageText}\n              onChange={(e) => setNewMessageText(e.target.value)}\n            />\n            <button onClick={createMessage}>Send</button>\n          </div>\n        )}\n       \n      </div>\n       {/* Render the Popup component when isPopupOpen is true */}\n       {isPopupOpen && <Popup isPopupOpen={isPopupOpen} closePopup={closePopup} />}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatApp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}