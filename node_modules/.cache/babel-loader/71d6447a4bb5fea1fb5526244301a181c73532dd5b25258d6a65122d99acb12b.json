{"ast":null,"code":"var _jsxFileName = \"/home/lenon/notes-app/src/components/Popup.jsx\";\nimport React, { useState, useRef } from 'react';\nimport styles from './Popup.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Popup = ({\n  isPopupOpen,\n  closePopup\n}) => {\n  // const [groupName, setGroupName] = useState('');\n  // const [selectedColor, setSelectedColor] = useState(null);\n  const colors = [\"#B38BFA\", \"#FF79F2\", \"#43E6FC\", \"#F19576\", \"#0047FF\", \"#6691FF\"];\n  // const noteInputRef = useRef(null);\n  // const [noteText, setNoteText] = useState(''); // State to store note text\n\n  // const handleCreateGroup = () => {\n  //   if (groupName && selectedColor) {\n  // You can perform any necessary actions when creating a group here\n  // console.log(`Creating group: ${groupName}`);\n  // setGroupName('');\n  // setSelectedColor(null);\n\n  // Save the group to localStorage (use a unique key)\n  // localStorage.setItem(groupName, JSON.stringify({ name: groupName, color: selectedColor }));\n\n  // Clear the note input field\n  // setNoteText('');\n\n  // Focus on the note input field for the next entry\n  //   noteInputRef.current.focus();\n  // } else {\n  // Handle validation or show an error message if necessary\n  //   }\n  // };\n\n  // const handleColorSelection = (color) => {\n  //   setSelectedColor(color);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isPopupOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.popup,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles.closeIcon,\n        onClick: closePopup,\n        children: \"\\u2716\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create New Notes Group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Group Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your group name....\",\n        value: noteText,\n        onChange: e => setNoteText(e.target.value),\n        onKeyPress: e => {\n          if (e.key === 'Enter') {\n            // handleCreateGroup();\n          }\n        }\n        // ref={noteInputRef}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.sidebar,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Choose color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: styles.sidebarList,\n          children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: styles.sidebarListItem,\n            style: {\n              backgroundColor: color\n            },\n            onClick: () => handleColorSelection(color)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.createBtn,\n        onClick: handleCreateGroup,\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false);\n};\n_c = Popup;\nexport default Popup;\nvar _c;\n$RefreshReg$(_c, \"Popup\");","map":{"version":3,"names":["React","useState","useRef","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","Popup","isPopupOpen","closePopup","colors","children","className","popup","closeIcon","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","noteText","onChange","e","setNoteText","target","onKeyPress","key","sidebar","sidebarList","map","color","index","sidebarListItem","style","backgroundColor","handleColorSelection","createBtn","handleCreateGroup","_c","$RefreshReg$"],"sources":["/home/lenon/notes-app/src/components/Popup.jsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport styles from './Popup.module.css';\n\nconst Popup = ({ isPopupOpen, closePopup }) => {\n  // const [groupName, setGroupName] = useState('');\n  // const [selectedColor, setSelectedColor] = useState(null);\n  const colors = [\"#B38BFA\", \"#FF79F2\", \"#43E6FC\", \"#F19576\", \"#0047FF\", \"#6691FF\"];\n  // const noteInputRef = useRef(null);\n  // const [noteText, setNoteText] = useState(''); // State to store note text\n\n\n  // const handleCreateGroup = () => {\n  //   if (groupName && selectedColor) {\n      // You can perform any necessary actions when creating a group here\n      // console.log(`Creating group: ${groupName}`);\n      // setGroupName('');\n      // setSelectedColor(null);\n\n      // Save the group to localStorage (use a unique key)\n      // localStorage.setItem(groupName, JSON.stringify({ name: groupName, color: selectedColor }));\n\n// Clear the note input field\n// setNoteText('');\n\n\n      // Focus on the note input field for the next entry\n    //   noteInputRef.current.focus();\n    // } else {\n      // Handle validation or show an error message if necessary\n  //   }\n  // };\n\n  // const handleColorSelection = (color) => {\n  //   setSelectedColor(color);\n  // };\n\n  return (\n    <>\n      {isPopupOpen ? (\n        <div className={styles.popup}>\n          <span className={styles.closeIcon} onClick={closePopup}>\n            &#10006;\n          </span>\n          <h2>Create New Notes Group</h2>\n          <p>Group Name</p>\n          <input\n            type=\"text\"\n            placeholder=\"Enter your group name....\"\n            value={noteText}\n              onChange={(e) => setNoteText(e.target.value)}\n                onKeyPress={(e) => {\n                  if (e.key === 'Enter') {\n                    // handleCreateGroup();\n              }\n            }}\n            // ref={noteInputRef}\n          />\n          <div className={styles.sidebar}>\n            <p>Choose color</p>\n            <ul className={styles.sidebarList}>\n              {colors.map((color, index) => (\n                <li\n                  key={index}\n                  className={styles.sidebarListItem}\n                  style={{ backgroundColor: color }}\n                  onClick={() => handleColorSelection(color)}\n                />\n              ))}\n            </ul>\n          </div>\n          <button className={styles.createBtn} onClick={handleCreateGroup}>\n            Create\n          </button>\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport default Popup;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}