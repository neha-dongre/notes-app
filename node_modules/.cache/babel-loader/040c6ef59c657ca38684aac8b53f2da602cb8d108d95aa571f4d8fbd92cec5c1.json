{"ast":null,"code":"var _jsxFileName = \"/home/lenon/notes-app/src/components/Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styles from './ChatApp.module.css'; // Update your CSS styles\n// import styles from './ChatApp.module.css';\nimport lock from '../assets/Vector.png';\nimport bgImage from '../assets/bgimage.png';\nimport createGroupIcon from '../assets/+.png';\nimport popup from './popup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  const [contacts, setContacts] = useState([]); // Replace this with your contact/note data\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [newMessageText, setNewMessageText] = useState('');\n  const [openPopup] = useState('');\n\n  // Function to create a new message/note\n  const createMessage = () => {\n    if (selectedContact) {\n      // Create a new message/note object\n      const newMessage = {\n        content: newMessageText,\n        sender: 'User',\n        // You can change this to the sender's name\n        timestamp: new Date().toLocaleString() // Current date and time\n      };\n\n      // Add the new message/note to the selected contact's notes\n      const updatedContacts = contacts.map(contact => {\n        if (contact.id === selectedContact.id) {\n          return {\n            ...contact,\n            notes: [...contact.notes, newMessage]\n          };\n        }\n        return contact;\n      });\n      setContacts(updatedContacts);\n      setNewMessageText('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chatApp,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.contacts,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Pocket Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => openPopup(popup),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: createGroupIcon,\n            alt: \"Create Group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }, this), \"Create Notes group\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), contacts.map(contact => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.contact} ${selectedContact && selectedContact.id === contact.id ? styles.selectedContact : ''}`,\n        onClick: () => setSelectedContact(contact),\n        children: contact.name\n      }, contact.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.messages,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: bgImage,\n        alt: bgImage,\n        className: styles.bgImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.pocketnotes,\n        children: \"Pocket Notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.description,\n        children: [\"Send and receive messages without keeping your phone online.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), \"Use Pocket Notes on up to 4 linked devices and 1 mobile phone\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.FooterContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: lock,\n          alt: \"lock\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"end-to-end encrypted\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), selectedContact && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.messageContainer,\n        children: selectedContact.notes.map((note, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${note.sender === 'User' ? styles.sentMessage : styles.receivedMessage}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.messageContent,\n            children: note.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.timestamp,\n            children: note.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), selectedContact && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.messageInput,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message here...\",\n          value: newMessageText,\n          onChange: e => setNewMessageText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"p5x01ZYQCUtV+2DgFJgB5MyOAKM=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","styles","lock","bgImage","createGroupIcon","popup","jsxDEV","_jsxDEV","ChatApp","_s","contacts","setContacts","selectedContact","setSelectedContact","newMessageText","setNewMessageText","openPopup","createMessage","newMessage","content","sender","timestamp","Date","toLocaleString","updatedContacts","map","contact","id","notes","className","chatApp","children","fileName","_jsxFileName","lineNumber","columnNumber","button","onClick","src","alt","name","messages","pocketnotes","description","FooterContainer","messageContainer","note","index","sentMessage","receivedMessage","messageContent","messageInput","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/home/lenon/notes-app/src/components/Chat.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styles from './ChatApp.module.css'; // Update your CSS styles\n// import styles from './ChatApp.module.css';\nimport lock from '../assets/Vector.png';\nimport bgImage from '../assets/bgimage.png';\nimport createGroupIcon from '../assets/+.png';\nimport popup from './popup';\n\n\nconst ChatApp = () => {\n  const [contacts, setContacts] = useState([]); // Replace this with your contact/note data\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [newMessageText, setNewMessageText] = useState('');\n  const  [ openPopup ] = useState('');\n\n  // Function to create a new message/note\n  const createMessage = () => {\n    if (selectedContact) {\n      // Create a new message/note object\n      const newMessage = {\n        content: newMessageText,\n        sender: 'User', // You can change this to the sender's name\n        timestamp: new Date().toLocaleString(), // Current date and time\n      };\n\n      // Add the new message/note to the selected contact's notes\n      const updatedContacts = contacts.map((contact) => {\n        if (contact.id === selectedContact.id) {\n          return {\n            ...contact,\n            notes: [...contact.notes, newMessage],\n          };\n        }\n        return contact;\n      });\n\n      setContacts(updatedContacts);\n      setNewMessageText('');\n    }\n  };\n\n  return (\n    <div className={styles.chatApp}>\n      <div className={styles.contacts}>\n        {/* Display contacts/people as notes on the left side */}\n        <div className=\"group-container\">\n        <h1>Pocket Notes</h1>\n        <button\n          className={styles.button}\n          onClick={() => openPopup(popup)}\n        >\n          <img src={createGroupIcon} alt=\"Create Group\" />\n          Create Notes group\n        </button>\n      </div>\n        {contacts.map((contact) => (         \n          <div\n            key={contact.id}\n            className={`${styles.contact} ${\n              selectedContact && selectedContact.id === contact.id\n                ? styles.selectedContact\n                : ''\n            }`}\n            onClick={() => setSelectedContact(contact)}\n          >\n            {contact.name}\n          </div>\n        ))}\n      </div>\n      <div className={styles.messages}>\n        {/* Display messages/notes on the right side */}\n        <img src={bgImage} alt={bgImage} className={styles.bgImage} />\n            <p className={styles.pocketnotes}>Pocket Notes</p>\n            <p className={styles.description}>\n              Send and receive messages without keeping your phone online.\n              <br />\n              Use Pocket Notes on up to 4 linked devices and 1 mobile phone\n            </p>\n            <div className={styles.FooterContainer}>\n              <img src={lock} alt=\"lock\" />\n              <p>end-to-end encrypted</p>\n            </div>\n        {selectedContact && (\n          <div className={styles.messageContainer}>\n            {selectedContact.notes.map((note, index) => (\n              <div\n                key={index}\n                className={`${\n                  note.sender === 'User' ? styles.sentMessage : styles.receivedMessage\n                }`}\n              >\n                <div className={styles.messageContent}>{note.content}</div>\n                <div className={styles.timestamp}>{note.timestamp}</div>\n              </div>\n            ))}\n          </div>\n        )}\n        {selectedContact && (\n          <div className={styles.messageInput}>\n            <input\n              type=\"text\"\n              placeholder=\"Type your message here...\"\n              value={newMessageText}\n              onChange={(e) => setNewMessageText(e.target.value)}\n            />\n            <button onClick={createMessage}>Send</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatApp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}