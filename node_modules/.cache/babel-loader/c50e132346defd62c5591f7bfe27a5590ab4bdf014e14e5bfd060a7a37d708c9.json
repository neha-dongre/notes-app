{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst cookieParser = require('cookie-parser');\nconst dotenv = require('dotenv');\nconst jwt = require('jsonwebtoken');\nconst cors = require('cors');\nconst bcrypt = require('bcryptjs');\nconst User = require('./models/User');\nconst Message = require('./models/Message');\nconst ws = require('ws');\nconst fs = require('fs');\ndotenv.config();\nmongoose.connect(process.env.MONGO_URL, err => {\n  if (err) throw err;\n});\nconst jwtSecret = process.env.JWT_SECRET;\nconst bcryptSalt = bcrypt.genSaltSync(10);\nconst app = express();\napp.use('/uploads', express.static(__dirname + '/uploads'));\napp.use(express.json());\napp.use(cookieParser());\napp.use(cors({\n  credentials: true,\n  origin: process.env.CLIENT_URL\n}));\nasync function getUserDataFromRequest(req) {\n  return new Promise((resolve, reject) => {\n    var _req$cookies;\n    const token = (_req$cookies = req.cookies) === null || _req$cookies === void 0 ? void 0 : _req$cookies.token;\n    if (token) {\n      jwt.verify(token, jwtSecret, {}, (err, userData) => {\n        if (err) throw err;\n        resolve(userData);\n      });\n    } else {\n      reject('no token');\n    }\n  });\n}\napp.get('/test', (req, res) => {\n  res.json('test ok');\n});\napp.get('/messages/:userId', async (req, res) => {\n  const {\n    userId\n  } = req.params;\n  const userData = await getUserDataFromRequest(req);\n  const ourUserId = userData.userId;\n  const messages = await Message.find({\n    sender: {\n      $in: [userId, ourUserId]\n    },\n    recipient: {\n      $in: [userId, ourUserId]\n    }\n  }).sort({\n    createdAt: 1\n  });\n  res.json(messages);\n});\napp.get('/people', async (req, res) => {\n  const users = await User.find({}, {\n    '_id': 1,\n    username: 1\n  });\n  res.json(users);\n});\napp.get('/profile', (req, res) => {\n  var _req$cookies2;\n  const token = (_req$cookies2 = req.cookies) === null || _req$cookies2 === void 0 ? void 0 : _req$cookies2.token;\n  if (token) {\n    jwt.verify(token, jwtSecret, {}, (err, userData) => {\n      if (err) throw err;\n      res.json(userData);\n    });\n  } else {\n    res.status(401).json('no token');\n  }\n});\napp.post('/login', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  const foundUser = await User.findOne({\n    username\n  });\n  if (foundUser) {\n    const passOk = bcrypt.compareSync(password, foundUser.password);\n    if (passOk) {\n      jwt.sign({\n        userId: foundUser._id,\n        username\n      }, jwtSecret, {}, (err, token) => {\n        res.cookie('token', token, {\n          sameSite: 'none',\n          secure: true\n        }).json({\n          id: foundUser._id\n        });\n      });\n    }\n  }\n});\napp.post('/logout', (req, res) => {\n  res.cookie('token', '', {\n    sameSite: 'none',\n    secure: true\n  }).json('ok');\n});\napp.post('/register', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  try {\n    const hashedPassword = bcrypt.hashSync(password, bcryptSalt);\n    const createdUser = await User.create({\n      username: username,\n      password: hashedPassword\n    });\n    jwt.sign({\n      userId: createdUser._id,\n      username\n    }, jwtSecret, {}, (err, token) => {\n      if (err) throw err;\n      res.cookie('token', token, {\n        sameSite: 'none',\n        secure: true\n      }).status(201).json({\n        id: createdUser._id\n      });\n    });\n  } catch (err) {\n    if (err) throw err;\n    res.status(500).json('error');\n  }\n});\nconst server = app.listen(4040);\nconst wss = new ws.WebSocketServer({\n  server\n});\nwss.on('connection', (connection, req) => {\n  function notifyAboutOnlinePeople() {\n    [...wss.clients].forEach(client => {\n      client.send(JSON.stringify({\n        online: [...wss.clients].map(c => ({\n          userId: c.userId,\n          username: c.username\n        }))\n      }));\n    });\n  }\n  connection.isAlive = true;\n  connection.timer = setInterval(() => {\n    connection.ping();\n    connection.deathTimer = setTimeout(() => {\n      connection.isAlive = false;\n      clearInterval(connection.timer);\n      connection.terminate();\n      notifyAboutOnlinePeople();\n      console.log('dead');\n    }, 1000);\n  }, 5000);\n  connection.on('pong', () => {\n    clearTimeout(connection.deathTimer);\n  });\n\n  // read username and id form the cookie for this connection\n  const cookies = req.headers.cookie;\n  if (cookies) {\n    const tokenCookieString = cookies.split(';').find(str => str.startsWith('token='));\n    if (tokenCookieString) {\n      const token = tokenCookieString.split('=')[1];\n      if (token) {\n        jwt.verify(token, jwtSecret, {}, (err, userData) => {\n          if (err) throw err;\n          const {\n            userId,\n            username\n          } = userData;\n          connection.userId = userId;\n          connection.username = username;\n        });\n      }\n    }\n  }\n  connection.on('message', async message => {\n    const messageData = JSON.parse(message.toString());\n    const {\n      recipient,\n      text,\n      file\n    } = messageData;\n    let filename = null;\n    if (file) {\n      console.log('size', file.data.length);\n      const parts = file.name.split('.');\n      const ext = parts[parts.length - 1];\n      filename = Date.now() + '.' + ext;\n      const path = __dirname + '/uploads/' + filename;\n      const bufferData = new Buffer(file.data.split(',')[1], 'base64');\n      fs.writeFile(path, bufferData, () => {\n        console.log('file saved:' + path);\n      });\n    }\n    if (recipient && (text || file)) {\n      const messageDoc = await Message.create({\n        sender: connection.userId,\n        recipient,\n        text,\n        file: file ? filename : null\n      });\n      console.log('created message');\n      [...wss.clients].filter(c => c.userId === recipient).forEach(c => c.send(JSON.stringify({\n        text,\n        sender: connection.userId,\n        recipient,\n        file: file ? filename : null,\n        _id: messageDoc._id\n      })));\n    }\n  });\n\n  // notify everyone about online people (when someone connects)\n  notifyAboutOnlinePeople();\n});","map":{"version":3,"names":["express","require","mongoose","cookieParser","dotenv","jwt","cors","bcrypt","User","Message","ws","fs","config","connect","process","env","MONGO_URL","err","jwtSecret","JWT_SECRET","bcryptSalt","genSaltSync","app","use","static","__dirname","json","credentials","origin","CLIENT_URL","getUserDataFromRequest","req","Promise","resolve","reject","_req$cookies","token","cookies","verify","userData","get","res","userId","params","ourUserId","messages","find","sender","$in","recipient","sort","createdAt","users","username","_req$cookies2","status","post","password","body","foundUser","findOne","passOk","compareSync","sign","_id","cookie","sameSite","secure","id","hashedPassword","hashSync","createdUser","create","server","listen","wss","WebSocketServer","on","connection","notifyAboutOnlinePeople","clients","forEach","client","send","JSON","stringify","online","map","c","isAlive","timer","setInterval","ping","deathTimer","setTimeout","clearInterval","terminate","console","log","clearTimeout","headers","tokenCookieString","split","str","startsWith","message","messageData","parse","toString","text","file","filename","data","length","parts","name","ext","Date","now","path","bufferData","Buffer","writeFile","messageDoc","filter"],"sources":["/home/lenon/notes-app/src/index.js"],"sourcesContent":["const express = require('express');\nconst mongoose = require('mongoose');\nconst cookieParser = require('cookie-parser');\nconst dotenv = require('dotenv');\nconst jwt = require('jsonwebtoken');\nconst cors = require('cors');\nconst bcrypt = require('bcryptjs');\nconst User = require('./models/User');\nconst Message = require('./models/Message');\nconst ws = require('ws');\nconst fs = require('fs');\n\ndotenv.config();\nmongoose.connect(process.env.MONGO_URL, (err) => {\n  if (err) throw err;\n});\nconst jwtSecret = process.env.JWT_SECRET;\nconst bcryptSalt = bcrypt.genSaltSync(10);\n\nconst app = express();\napp.use('/uploads', express.static(__dirname + '/uploads'));\napp.use(express.json());\napp.use(cookieParser());\napp.use(cors({\n  credentials: true,\n  origin: process.env.CLIENT_URL,\n}));\n\nasync function getUserDataFromRequest(req) {\n  return new Promise((resolve, reject) => {\n    const token = req.cookies?.token;\n    if (token) {\n      jwt.verify(token, jwtSecret, {}, (err, userData) => {\n        if (err) throw err;\n        resolve(userData);\n      });\n    } else {\n      reject('no token');\n    }\n  });\n\n}\n\napp.get('/test', (req,res) => {\n  res.json('test ok');\n});\n\napp.get('/messages/:userId', async (req,res) => {\n  const {userId} = req.params;\n  const userData = await getUserDataFromRequest(req);\n  const ourUserId = userData.userId;\n  const messages = await Message.find({\n    sender:{$in:[userId,ourUserId]},\n    recipient:{$in:[userId,ourUserId]},\n  }).sort({createdAt: 1});\n  res.json(messages);\n});\n\napp.get('/people', async (req,res) => {\n  const users = await User.find({}, {'_id':1,username:1});\n  res.json(users);\n});\n\napp.get('/profile', (req,res) => {\n  const token = req.cookies?.token;\n  if (token) {\n    jwt.verify(token, jwtSecret, {}, (err, userData) => {\n      if (err) throw err;\n      res.json(userData);\n    });\n  } else {\n    res.status(401).json('no token');\n  }\n});\n\napp.post('/login', async (req,res) => {\n  const {username, password} = req.body;\n  const foundUser = await User.findOne({username});\n  if (foundUser) {\n    const passOk = bcrypt.compareSync(password, foundUser.password);\n    if (passOk) {\n      jwt.sign({userId:foundUser._id,username}, jwtSecret, {}, (err, token) => {\n        res.cookie('token', token, {sameSite:'none', secure:true}).json({\n          id: foundUser._id,\n        });\n      });\n    }\n  }\n});\n\napp.post('/logout', (req,res) => {\n  res.cookie('token', '', {sameSite:'none', secure:true}).json('ok');\n});\n\napp.post('/register', async (req,res) => {\n  const {username,password} = req.body;\n  try {\n    const hashedPassword = bcrypt.hashSync(password, bcryptSalt);\n    const createdUser = await User.create({\n      username:username,\n      password:hashedPassword,\n    });\n    jwt.sign({userId:createdUser._id,username}, jwtSecret, {}, (err, token) => {\n      if (err) throw err;\n      res.cookie('token', token, {sameSite:'none', secure:true}).status(201).json({\n        id: createdUser._id,\n      });\n    });\n  } catch(err) {\n    if (err) throw err;\n    res.status(500).json('error');\n  }\n});\n\nconst server = app.listen(4040);\n\nconst wss = new ws.WebSocketServer({server});\nwss.on('connection', (connection, req) => {\n\n  function notifyAboutOnlinePeople() {\n    [...wss.clients].forEach(client => {\n      client.send(JSON.stringify({\n        online: [...wss.clients].map(c => ({userId:c.userId,username:c.username})),\n      }));\n    });\n  }\n\n  connection.isAlive = true;\n\n  connection.timer = setInterval(() => {\n    connection.ping();\n    connection.deathTimer = setTimeout(() => {\n      connection.isAlive = false;\n      clearInterval(connection.timer);\n      connection.terminate();\n      notifyAboutOnlinePeople();\n      console.log('dead');\n    }, 1000);\n  }, 5000);\n\n  connection.on('pong', () => {\n    clearTimeout(connection.deathTimer);\n  });\n\n  // read username and id form the cookie for this connection\n  const cookies = req.headers.cookie;\n  if (cookies) {\n    const tokenCookieString = cookies.split(';').find(str => str.startsWith('token='));\n    if (tokenCookieString) {\n      const token = tokenCookieString.split('=')[1];\n      if (token) {\n        jwt.verify(token, jwtSecret, {}, (err, userData) => {\n          if (err) throw err;\n          const {userId, username} = userData;\n          connection.userId = userId;\n          connection.username = username;\n        });\n      }\n    }\n  }\n\n  connection.on('message', async (message) => {\n    const messageData = JSON.parse(message.toString());\n    const {recipient, text, file} = messageData;\n    let filename = null;\n    if (file) {\n      console.log('size', file.data.length);\n      const parts = file.name.split('.');\n      const ext = parts[parts.length - 1];\n      filename = Date.now() + '.'+ext;\n      const path = __dirname + '/uploads/' + filename;\n      const bufferData = new Buffer(file.data.split(',')[1], 'base64');\n      fs.writeFile(path, bufferData, () => {\n        console.log('file saved:'+path);\n      });\n    }\n    if (recipient && (text || file)) {\n      const messageDoc = await Message.create({\n        sender:connection.userId,\n        recipient,\n        text,\n        file: file ? filename : null,\n      });\n      console.log('created message');\n      [...wss.clients]\n        .filter(c => c.userId === recipient)\n        .forEach(c => c.send(JSON.stringify({\n          text,\n          sender:connection.userId,\n          recipient,\n          file: file ? filename : null,\n          _id:messageDoc._id,\n        })));\n    }\n  });\n\n  // notify everyone about online people (when someone connects)\n  notifyAboutOnlinePeople();\n});"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,YAAY,GAAGF,OAAO,CAAC,eAAe,CAAC;AAC7C,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMI,GAAG,GAAGJ,OAAO,CAAC,cAAc,CAAC;AACnC,MAAMK,IAAI,GAAGL,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMM,MAAM,GAAGN,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMO,IAAI,GAAGP,OAAO,CAAC,eAAe,CAAC;AACrC,MAAMQ,OAAO,GAAGR,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAMS,EAAE,GAAGT,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMU,EAAE,GAAGV,OAAO,CAAC,IAAI,CAAC;AAExBG,MAAM,CAACQ,MAAM,CAAC,CAAC;AACfV,QAAQ,CAACW,OAAO,CAACC,OAAO,CAACC,GAAG,CAACC,SAAS,EAAGC,GAAG,IAAK;EAC/C,IAAIA,GAAG,EAAE,MAAMA,GAAG;AACpB,CAAC,CAAC;AACF,MAAMC,SAAS,GAAGJ,OAAO,CAACC,GAAG,CAACI,UAAU;AACxC,MAAMC,UAAU,GAAGb,MAAM,CAACc,WAAW,CAAC,EAAE,CAAC;AAEzC,MAAMC,GAAG,GAAGtB,OAAO,CAAC,CAAC;AACrBsB,GAAG,CAACC,GAAG,CAAC,UAAU,EAAEvB,OAAO,CAACwB,MAAM,CAACC,SAAS,GAAG,UAAU,CAAC,CAAC;AAC3DH,GAAG,CAACC,GAAG,CAACvB,OAAO,CAAC0B,IAAI,CAAC,CAAC,CAAC;AACvBJ,GAAG,CAACC,GAAG,CAACpB,YAAY,CAAC,CAAC,CAAC;AACvBmB,GAAG,CAACC,GAAG,CAACjB,IAAI,CAAC;EACXqB,WAAW,EAAE,IAAI;EACjBC,MAAM,EAAEd,OAAO,CAACC,GAAG,CAACc;AACtB,CAAC,CAAC,CAAC;AAEH,eAAeC,sBAAsBA,CAACC,GAAG,EAAE;EACzC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IAAA,IAAAC,YAAA;IACtC,MAAMC,KAAK,IAAAD,YAAA,GAAGJ,GAAG,CAACM,OAAO,cAAAF,YAAA,uBAAXA,YAAA,CAAaC,KAAK;IAChC,IAAIA,KAAK,EAAE;MACT/B,GAAG,CAACiC,MAAM,CAACF,KAAK,EAAElB,SAAS,EAAE,CAAC,CAAC,EAAE,CAACD,GAAG,EAAEsB,QAAQ,KAAK;QAClD,IAAItB,GAAG,EAAE,MAAMA,GAAG;QAClBgB,OAAO,CAACM,QAAQ,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLL,MAAM,CAAC,UAAU,CAAC;IACpB;EACF,CAAC,CAAC;AAEJ;AAEAZ,GAAG,CAACkB,GAAG,CAAC,OAAO,EAAE,CAACT,GAAG,EAACU,GAAG,KAAK;EAC5BA,GAAG,CAACf,IAAI,CAAC,SAAS,CAAC;AACrB,CAAC,CAAC;AAEFJ,GAAG,CAACkB,GAAG,CAAC,mBAAmB,EAAE,OAAOT,GAAG,EAACU,GAAG,KAAK;EAC9C,MAAM;IAACC;EAAM,CAAC,GAAGX,GAAG,CAACY,MAAM;EAC3B,MAAMJ,QAAQ,GAAG,MAAMT,sBAAsB,CAACC,GAAG,CAAC;EAClD,MAAMa,SAAS,GAAGL,QAAQ,CAACG,MAAM;EACjC,MAAMG,QAAQ,GAAG,MAAMpC,OAAO,CAACqC,IAAI,CAAC;IAClCC,MAAM,EAAC;MAACC,GAAG,EAAC,CAACN,MAAM,EAACE,SAAS;IAAC,CAAC;IAC/BK,SAAS,EAAC;MAACD,GAAG,EAAC,CAACN,MAAM,EAACE,SAAS;IAAC;EACnC,CAAC,CAAC,CAACM,IAAI,CAAC;IAACC,SAAS,EAAE;EAAC,CAAC,CAAC;EACvBV,GAAG,CAACf,IAAI,CAACmB,QAAQ,CAAC;AACpB,CAAC,CAAC;AAEFvB,GAAG,CAACkB,GAAG,CAAC,SAAS,EAAE,OAAOT,GAAG,EAACU,GAAG,KAAK;EACpC,MAAMW,KAAK,GAAG,MAAM5C,IAAI,CAACsC,IAAI,CAAC,CAAC,CAAC,EAAE;IAAC,KAAK,EAAC,CAAC;IAACO,QAAQ,EAAC;EAAC,CAAC,CAAC;EACvDZ,GAAG,CAACf,IAAI,CAAC0B,KAAK,CAAC;AACjB,CAAC,CAAC;AAEF9B,GAAG,CAACkB,GAAG,CAAC,UAAU,EAAE,CAACT,GAAG,EAACU,GAAG,KAAK;EAAA,IAAAa,aAAA;EAC/B,MAAMlB,KAAK,IAAAkB,aAAA,GAAGvB,GAAG,CAACM,OAAO,cAAAiB,aAAA,uBAAXA,aAAA,CAAalB,KAAK;EAChC,IAAIA,KAAK,EAAE;IACT/B,GAAG,CAACiC,MAAM,CAACF,KAAK,EAAElB,SAAS,EAAE,CAAC,CAAC,EAAE,CAACD,GAAG,EAAEsB,QAAQ,KAAK;MAClD,IAAItB,GAAG,EAAE,MAAMA,GAAG;MAClBwB,GAAG,CAACf,IAAI,CAACa,QAAQ,CAAC;IACpB,CAAC,CAAC;EACJ,CAAC,MAAM;IACLE,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAAC7B,IAAI,CAAC,UAAU,CAAC;EAClC;AACF,CAAC,CAAC;AAEFJ,GAAG,CAACkC,IAAI,CAAC,QAAQ,EAAE,OAAOzB,GAAG,EAACU,GAAG,KAAK;EACpC,MAAM;IAACY,QAAQ;IAAEI;EAAQ,CAAC,GAAG1B,GAAG,CAAC2B,IAAI;EACrC,MAAMC,SAAS,GAAG,MAAMnD,IAAI,CAACoD,OAAO,CAAC;IAACP;EAAQ,CAAC,CAAC;EAChD,IAAIM,SAAS,EAAE;IACb,MAAME,MAAM,GAAGtD,MAAM,CAACuD,WAAW,CAACL,QAAQ,EAAEE,SAAS,CAACF,QAAQ,CAAC;IAC/D,IAAII,MAAM,EAAE;MACVxD,GAAG,CAAC0D,IAAI,CAAC;QAACrB,MAAM,EAACiB,SAAS,CAACK,GAAG;QAACX;MAAQ,CAAC,EAAEnC,SAAS,EAAE,CAAC,CAAC,EAAE,CAACD,GAAG,EAAEmB,KAAK,KAAK;QACvEK,GAAG,CAACwB,MAAM,CAAC,OAAO,EAAE7B,KAAK,EAAE;UAAC8B,QAAQ,EAAC,MAAM;UAAEC,MAAM,EAAC;QAAI,CAAC,CAAC,CAACzC,IAAI,CAAC;UAC9D0C,EAAE,EAAET,SAAS,CAACK;QAChB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF;AACF,CAAC,CAAC;AAEF1C,GAAG,CAACkC,IAAI,CAAC,SAAS,EAAE,CAACzB,GAAG,EAACU,GAAG,KAAK;EAC/BA,GAAG,CAACwB,MAAM,CAAC,OAAO,EAAE,EAAE,EAAE;IAACC,QAAQ,EAAC,MAAM;IAAEC,MAAM,EAAC;EAAI,CAAC,CAAC,CAACzC,IAAI,CAAC,IAAI,CAAC;AACpE,CAAC,CAAC;AAEFJ,GAAG,CAACkC,IAAI,CAAC,WAAW,EAAE,OAAOzB,GAAG,EAACU,GAAG,KAAK;EACvC,MAAM;IAACY,QAAQ;IAACI;EAAQ,CAAC,GAAG1B,GAAG,CAAC2B,IAAI;EACpC,IAAI;IACF,MAAMW,cAAc,GAAG9D,MAAM,CAAC+D,QAAQ,CAACb,QAAQ,EAAErC,UAAU,CAAC;IAC5D,MAAMmD,WAAW,GAAG,MAAM/D,IAAI,CAACgE,MAAM,CAAC;MACpCnB,QAAQ,EAACA,QAAQ;MACjBI,QAAQ,EAACY;IACX,CAAC,CAAC;IACFhE,GAAG,CAAC0D,IAAI,CAAC;MAACrB,MAAM,EAAC6B,WAAW,CAACP,GAAG;MAACX;IAAQ,CAAC,EAAEnC,SAAS,EAAE,CAAC,CAAC,EAAE,CAACD,GAAG,EAAEmB,KAAK,KAAK;MACzE,IAAInB,GAAG,EAAE,MAAMA,GAAG;MAClBwB,GAAG,CAACwB,MAAM,CAAC,OAAO,EAAE7B,KAAK,EAAE;QAAC8B,QAAQ,EAAC,MAAM;QAAEC,MAAM,EAAC;MAAI,CAAC,CAAC,CAACZ,MAAM,CAAC,GAAG,CAAC,CAAC7B,IAAI,CAAC;QAC1E0C,EAAE,EAAEG,WAAW,CAACP;MAClB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC,OAAM/C,GAAG,EAAE;IACX,IAAIA,GAAG,EAAE,MAAMA,GAAG;IAClBwB,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAAC7B,IAAI,CAAC,OAAO,CAAC;EAC/B;AACF,CAAC,CAAC;AAEF,MAAM+C,MAAM,GAAGnD,GAAG,CAACoD,MAAM,CAAC,IAAI,CAAC;AAE/B,MAAMC,GAAG,GAAG,IAAIjE,EAAE,CAACkE,eAAe,CAAC;EAACH;AAAM,CAAC,CAAC;AAC5CE,GAAG,CAACE,EAAE,CAAC,YAAY,EAAE,CAACC,UAAU,EAAE/C,GAAG,KAAK;EAExC,SAASgD,uBAAuBA,CAAA,EAAG;IACjC,CAAC,GAAGJ,GAAG,CAACK,OAAO,CAAC,CAACC,OAAO,CAACC,MAAM,IAAI;MACjCA,MAAM,CAACC,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;QACzBC,MAAM,EAAE,CAAC,GAAGX,GAAG,CAACK,OAAO,CAAC,CAACO,GAAG,CAACC,CAAC,KAAK;UAAC9C,MAAM,EAAC8C,CAAC,CAAC9C,MAAM;UAACW,QAAQ,EAACmC,CAAC,CAACnC;QAAQ,CAAC,CAAC;MAC3E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;EACJ;EAEAyB,UAAU,CAACW,OAAO,GAAG,IAAI;EAEzBX,UAAU,CAACY,KAAK,GAAGC,WAAW,CAAC,MAAM;IACnCb,UAAU,CAACc,IAAI,CAAC,CAAC;IACjBd,UAAU,CAACe,UAAU,GAAGC,UAAU,CAAC,MAAM;MACvChB,UAAU,CAACW,OAAO,GAAG,KAAK;MAC1BM,aAAa,CAACjB,UAAU,CAACY,KAAK,CAAC;MAC/BZ,UAAU,CAACkB,SAAS,CAAC,CAAC;MACtBjB,uBAAuB,CAAC,CAAC;MACzBkB,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACrB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,EAAE,IAAI,CAAC;EAERpB,UAAU,CAACD,EAAE,CAAC,MAAM,EAAE,MAAM;IAC1BsB,YAAY,CAACrB,UAAU,CAACe,UAAU,CAAC;EACrC,CAAC,CAAC;;EAEF;EACA,MAAMxD,OAAO,GAAGN,GAAG,CAACqE,OAAO,CAACnC,MAAM;EAClC,IAAI5B,OAAO,EAAE;IACX,MAAMgE,iBAAiB,GAAGhE,OAAO,CAACiE,KAAK,CAAC,GAAG,CAAC,CAACxD,IAAI,CAACyD,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAC,QAAQ,CAAC,CAAC;IAClF,IAAIH,iBAAiB,EAAE;MACrB,MAAMjE,KAAK,GAAGiE,iBAAiB,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC7C,IAAIlE,KAAK,EAAE;QACT/B,GAAG,CAACiC,MAAM,CAACF,KAAK,EAAElB,SAAS,EAAE,CAAC,CAAC,EAAE,CAACD,GAAG,EAAEsB,QAAQ,KAAK;UAClD,IAAItB,GAAG,EAAE,MAAMA,GAAG;UAClB,MAAM;YAACyB,MAAM;YAAEW;UAAQ,CAAC,GAAGd,QAAQ;UACnCuC,UAAU,CAACpC,MAAM,GAAGA,MAAM;UAC1BoC,UAAU,CAACzB,QAAQ,GAAGA,QAAQ;QAChC,CAAC,CAAC;MACJ;IACF;EACF;EAEAyB,UAAU,CAACD,EAAE,CAAC,SAAS,EAAE,MAAO4B,OAAO,IAAK;IAC1C,MAAMC,WAAW,GAAGtB,IAAI,CAACuB,KAAK,CAACF,OAAO,CAACG,QAAQ,CAAC,CAAC,CAAC;IAClD,MAAM;MAAC3D,SAAS;MAAE4D,IAAI;MAAEC;IAAI,CAAC,GAAGJ,WAAW;IAC3C,IAAIK,QAAQ,GAAG,IAAI;IACnB,IAAID,IAAI,EAAE;MACRb,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEY,IAAI,CAACE,IAAI,CAACC,MAAM,CAAC;MACrC,MAAMC,KAAK,GAAGJ,IAAI,CAACK,IAAI,CAACb,KAAK,CAAC,GAAG,CAAC;MAClC,MAAMc,GAAG,GAAGF,KAAK,CAACA,KAAK,CAACD,MAAM,GAAG,CAAC,CAAC;MACnCF,QAAQ,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,GAAG,GAACF,GAAG;MAC/B,MAAMG,IAAI,GAAG9F,SAAS,GAAG,WAAW,GAAGsF,QAAQ;MAC/C,MAAMS,UAAU,GAAG,IAAIC,MAAM,CAACX,IAAI,CAACE,IAAI,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;MAChE3F,EAAE,CAAC+G,SAAS,CAACH,IAAI,EAAEC,UAAU,EAAE,MAAM;QACnCvB,OAAO,CAACC,GAAG,CAAC,aAAa,GAACqB,IAAI,CAAC;MACjC,CAAC,CAAC;IACJ;IACA,IAAItE,SAAS,KAAK4D,IAAI,IAAIC,IAAI,CAAC,EAAE;MAC/B,MAAMa,UAAU,GAAG,MAAMlH,OAAO,CAAC+D,MAAM,CAAC;QACtCzB,MAAM,EAAC+B,UAAU,CAACpC,MAAM;QACxBO,SAAS;QACT4D,IAAI;QACJC,IAAI,EAAEA,IAAI,GAAGC,QAAQ,GAAG;MAC1B,CAAC,CAAC;MACFd,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9B,CAAC,GAAGvB,GAAG,CAACK,OAAO,CAAC,CACb4C,MAAM,CAACpC,CAAC,IAAIA,CAAC,CAAC9C,MAAM,KAAKO,SAAS,CAAC,CACnCgC,OAAO,CAACO,CAAC,IAAIA,CAAC,CAACL,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;QAClCwB,IAAI;QACJ9D,MAAM,EAAC+B,UAAU,CAACpC,MAAM;QACxBO,SAAS;QACT6D,IAAI,EAAEA,IAAI,GAAGC,QAAQ,GAAG,IAAI;QAC5B/C,GAAG,EAAC2D,UAAU,CAAC3D;MACjB,CAAC,CAAC,CAAC,CAAC;IACR;EACF,CAAC,CAAC;;EAEF;EACAe,uBAAuB,CAAC,CAAC;AAC3B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}