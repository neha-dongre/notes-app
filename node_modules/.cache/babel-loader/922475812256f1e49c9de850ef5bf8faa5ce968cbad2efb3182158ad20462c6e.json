{"ast":null,"code":"var _jsxFileName = \"/home/lenon/notes-app/src/components/Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styles from './ChatApp.module.css';\nimport lock from '../assets/Vector.png';\nimport bgImage from '../assets/bgimage.png';\nimport createGroupIcon from '../assets/+.png';\nimport Popup from './Popup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  const [noteGroups, setNoteGroups] = useState([]);\n  const [selectedNoteGroup, setSelectedNoteGroup] = useState(null);\n  const [newNoteText, setNewNoteText] = useState('');\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const handleCreateGroup = (groupName, selectedColor) => {\n    console.log(`Creating group: ${groupName} with color: ${selectedColor}`);\n    const newGroup = {\n      name: groupName,\n      color: selectedColor,\n      notes: []\n    };\n    setNoteGroups([...noteGroups, newGroup]);\n    setIsPopupOpen(false); // Close the popup after creating the group\n  };\n\n  const openPopup = () => {\n    setIsPopupOpen(true);\n  };\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n  const createNote = () => {\n    if (selectedNoteGroup) {\n      const newNote = {\n        content: newNoteText,\n        sender: 'User',\n        timestamp: new Date().toLocaleString()\n      };\n      const updatedNoteGroups = noteGroups.map(group => {\n        if (group.name === selectedNoteGroup.name) {\n          return {\n            ...group,\n            notes: [...group.notes, newNote]\n          };\n        }\n        return group;\n      });\n      setNoteGroups(updatedNoteGroups);\n      setNewNoteText('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chatApp,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.noteGroups,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Pocket Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: openPopup,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: createGroupIcon,\n            alt: \"Create Group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), \"Create Notes group\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), noteGroups.map(group => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.noteGroup} ${selectedNoteGroup && selectedNoteGroup.name === group.name ? styles.selectedNoteGroup : ''}`,\n        onClick: () => setSelectedNoteGroup(group),\n        style: {\n          backgroundColor: group.color\n        },\n        children: group.name\n      }, group.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.messages,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: isPopupOpen ? styles.hiddenContent : '',\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: bgImage,\n          alt: bgImage,\n          className: styles.bgImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.pocketnotes,\n          children: \"Pocket Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.description,\n          children: [\"Send and receive Texts without keeping your phone online.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), \"Use Pocket Notes on up to 4 linked devices and 1 mobile phone\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.FooterContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: lock,\n            alt: \"lock\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"end-to-end encrypted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), isPopupOpen && /*#__PURE__*/_jsxDEV(Popup, {\n        isPopupOpen: isPopupOpen,\n        closePopup: closePopup,\n        createNoteGroup: handleCreateGroup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"SjFjq1aA1DZwZ3Aiaf1WTn363TI=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","styles","lock","bgImage","createGroupIcon","Popup","jsxDEV","_jsxDEV","ChatApp","_s","noteGroups","setNoteGroups","selectedNoteGroup","setSelectedNoteGroup","newNoteText","setNewNoteText","isPopupOpen","setIsPopupOpen","handleCreateGroup","groupName","selectedColor","console","log","newGroup","name","color","notes","openPopup","closePopup","createNote","newNote","content","sender","timestamp","Date","toLocaleString","updatedNoteGroups","map","group","className","chatApp","children","fileName","_jsxFileName","lineNumber","columnNumber","button","onClick","src","alt","noteGroup","style","backgroundColor","messages","hiddenContent","pocketnotes","description","FooterContainer","createNoteGroup","_c","$RefreshReg$"],"sources":["/home/lenon/notes-app/src/components/Chat.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styles from './ChatApp.module.css';\nimport lock from '../assets/Vector.png';\nimport bgImage from '../assets/bgimage.png';\nimport createGroupIcon from '../assets/+.png';\nimport Popup from './Popup';\n\nconst ChatApp = () => {\n  const [noteGroups, setNoteGroups] = useState([]);\n  const [selectedNoteGroup, setSelectedNoteGroup] = useState(null);\n  const [newNoteText, setNewNoteText] = useState('');\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n\n  const handleCreateGroup = (groupName, selectedColor) => {\n    console.log(`Creating group: ${groupName} with color: ${selectedColor}`);\n    const newGroup = {\n      name: groupName,\n      color: selectedColor,\n      notes: [],\n    };\n    setNoteGroups([...noteGroups, newGroup]);\n    setIsPopupOpen(false); // Close the popup after creating the group\n  };\n\n  const openPopup = () => {\n    setIsPopupOpen(true);\n  };\n\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n\n  const createNote = () => {\n    if (selectedNoteGroup) {\n      const newNote = {\n        content: newNoteText,\n        sender: 'User',\n        timestamp: new Date().toLocaleString(),\n      };\n\n      const updatedNoteGroups = noteGroups.map((group) => {\n        if (group.name === selectedNoteGroup.name) {\n          return {\n            ...group,\n            notes: [...group.notes, newNote],\n          };\n        }\n        return group;\n      });\n\n      setNoteGroups(updatedNoteGroups);\n      setNewNoteText('');\n    }\n  };\n\n  return (\n    <div className={styles.chatApp}>\n      <div className={styles.noteGroups}>\n        <div className=\"group-container\">\n          <h1>Pocket Notes</h1>\n          <button className={styles.button} onClick={openPopup}>\n            <img src={createGroupIcon} alt=\"Create Group\" />\n            Create Notes group\n          </button>\n        </div>\n        {noteGroups.map((group) => (\n          <div\n            key={group.name}\n            className={`${styles.noteGroup} ${\n              selectedNoteGroup && selectedNoteGroup.name === group.name\n                ? styles.selectedNoteGroup\n                : ''\n            }`}\n            onClick={() => setSelectedNoteGroup(group)}\n            style={{ backgroundColor: group.color }}\n          >\n            {group.name}\n          </div>\n        ))}\n      </div>\n      <div className={styles.messages}>\n        <div className={isPopupOpen ? styles.hiddenContent : ''}>\n          <img src={bgImage} alt={bgImage} className={styles.bgImage} />\n          <p className={styles.pocketnotes}>Pocket Notes</p>\n          <p className={styles.description}>\n            Send and receive Texts without keeping your phone online.\n            <br />\n            Use Pocket Notes on up to 4 linked devices and 1 mobile phone\n          </p>\n          <div className={styles.FooterContainer}>\n            <img src={lock} alt=\"lock\" />\n            <p>end-to-end encrypted</p>\n          </div>\n          \n        </div>\n        {isPopupOpen && (\n          <Popup isPopupOpen={isPopupOpen} closePopup={closePopup} createNoteGroup={handleCreateGroup} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatApp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}