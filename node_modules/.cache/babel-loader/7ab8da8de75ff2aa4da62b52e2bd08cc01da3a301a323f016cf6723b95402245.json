{"ast":null,"code":"var _jsxFileName = \"/home/lenon/notes-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Group from './';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [groups, setGroups] = useState([]);\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [noteContent, setNoteContent] = useState('');\n  const [notes, setNotes] = useState([]); // State for storing notes related to the selected group\n\n  // Load groups and notes from localStorage on component mount\n  useEffect(() => {\n    const savedGroups = JSON.parse(localStorage.getItem('groups')) || [];\n    const savedNotes = JSON.parse(localStorage.getItem('notes')) || [];\n    setGroups(savedGroups);\n    setNotes(savedNotes);\n  }, []);\n\n  // Save groups and notes to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('groups', JSON.stringify(groups));\n    localStorage.setItem('notes', JSON.stringify(notes));\n  }, [groups, notes]);\n\n  // Filter and get notes related to the selected group\n  const getNotesForSelectedGroup = () => {\n    return notes.filter(note => note.group === groups[selectedGroup]);\n  };\n  const addGroup = groupName => {\n    if (groupName) {\n      setGroups([...groups, groupName]);\n    }\n    setIsPopupOpen(false);\n  };\n  const addNote = () => {\n    if (noteContent && selectedGroup !== null) {\n      const currentTime = new Date().toLocaleString();\n      const newNote = {\n        content: noteContent,\n        group: groups[selectedGroup],\n        createdAt: currentTime,\n        updatedAt: currentTime\n      };\n      setNotes([...notes, newNote]);\n      setNoteContent('');\n    }\n  };\n\n  // Event handler for Enter key press\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      addNote();\n    }\n  };\n\n  // Event handler for group selection change\n  const handleGroupChange = index => {\n    setSelectedGroup(index);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsPopupOpen(true),\n      children: \"Create Group\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), isPopupOpen && /*#__PURE__*/_jsxDEV(Group, {\n      addGroup: addGroup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: groups.map((group, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [group, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleGroupChange(index),\n          children: \"Select Group\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), selectedGroup !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter note content\",\n        value: noteContent,\n        onChange: e => setNoteContent(e.target.value),\n        onKeyPress: handleKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNote,\n        children: \"Add Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"enter-icon\",\n        onClick: addNote,\n        children: \"\\u23CE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notes\",\n      children: selectedGroup !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Notes for \", groups[selectedGroup]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), getNotesForSelectedGroup().map((note, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"note\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: note.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Created at: \", note.createdAt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Updated at: \", note.updatedAt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"gJ6BQ2BcgghborGWt74M1CHBk4U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Group","jsxDEV","_jsxDEV","App","_s","groups","setGroups","selectedGroup","setSelectedGroup","isPopupOpen","setIsPopupOpen","noteContent","setNoteContent","notes","setNotes","savedGroups","JSON","parse","localStorage","getItem","savedNotes","setItem","stringify","getNotesForSelectedGroup","filter","note","group","addGroup","groupName","addNote","currentTime","Date","toLocaleString","newNote","content","createdAt","updatedAt","handleKeyPress","e","key","handleGroupChange","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","type","placeholder","value","onChange","target","onKeyPress","_c","$RefreshReg$"],"sources":["/home/lenon/notes-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Group from './';\n\nconst App = () => {\n  const [groups, setGroups] = useState([]);\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [noteContent, setNoteContent] = useState('');\n  const [notes, setNotes] = useState([]); // State for storing notes related to the selected group\n\n  // Load groups and notes from localStorage on component mount\n  useEffect(() => {\n    const savedGroups = JSON.parse(localStorage.getItem('groups')) || [];\n    const savedNotes = JSON.parse(localStorage.getItem('notes')) || [];\n\n    setGroups(savedGroups);\n    setNotes(savedNotes);\n  }, []);\n\n  // Save groups and notes to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('groups', JSON.stringify(groups));\n    localStorage.setItem('notes', JSON.stringify(notes));\n  }, [groups, notes]);\n\n  // Filter and get notes related to the selected group\n  const getNotesForSelectedGroup = () => {\n    return notes.filter((note) => note.group === groups[selectedGroup]);\n  };\n\n  const addGroup = (groupName) => {\n    if (groupName) {\n      setGroups([...groups, groupName]);\n    }\n    setIsPopupOpen(false);\n  };\n\n  const addNote = () => {\n    if (noteContent && selectedGroup !== null) {\n      const currentTime = new Date().toLocaleString();\n      const newNote = {\n        content: noteContent,\n        group: groups[selectedGroup],\n        createdAt: currentTime,\n        updatedAt: currentTime,\n      };\n      setNotes([...notes, newNote]);\n      setNoteContent('');\n    }\n  };\n\n  // Event handler for Enter key press\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      addNote();\n    }\n  };\n\n  // Event handler for group selection change\n  const handleGroupChange = (index) => {\n    setSelectedGroup(index);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Notes App</h1>\n      <button onClick={() => setIsPopupOpen(true)}>Create Group</button>\n      {isPopupOpen && <Group addGroup={addGroup} />}\n      <ul>\n        {groups.map((group, index) => (\n          <li key={index}>\n            {group}\n            <button onClick={() => handleGroupChange(index)}>Select Group</button>\n          </li>\n        ))}\n      </ul>\n      {selectedGroup !== null && (\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"Enter note content\"\n            value={noteContent}\n            onChange={(e) => setNoteContent(e.target.value)}\n            onKeyPress={handleKeyPress}\n          />\n          <button onClick={addNote}>Add Note</button>\n          <span className=\"enter-icon\" onClick={addNote}>\n            &#x23CE;\n          </span>\n        </div>\n      )}\n      {/* Display notes for the selected group */}\n      <div className=\"notes\">\n        {selectedGroup !== null && (\n          <div>\n            <h2>Notes for {groups[selectedGroup]}</h2>\n            {getNotesForSelectedGroup().map((note, index) => (\n              <div key={index} className=\"note\">\n                <p>{note.content}</p>\n                <p>Created at: {note.createdAt}</p>\n                <p>Updated at: {note.updatedAt}</p>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}