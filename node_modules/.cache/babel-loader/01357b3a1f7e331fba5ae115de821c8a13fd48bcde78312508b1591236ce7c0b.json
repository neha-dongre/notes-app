{"ast":null,"code":"var _jsxFileName = \"/home/lenon/notes-app/src/components/Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styles from './ChatApp.module.css';\nimport lock from '../assets/Vector.png';\nimport bgImage from '../assets/bgimage.png';\nimport createGroupIcon from '../assets/+.png';\nimport Popup from './Popup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [newMessageText, setNewMessageText] = useState('');\n  const [noteGroups, setNoteGroups] = useState([]); // State to manage note groups\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const handleCreateGroup = (groupName, selectedColor) => {\n    // Implement your logic to create a group here\n    // You can use this function to manage your groups in the App component\n    console.log(`Creating group: ${groupName} with color: ${selectedColor}`);\n    const newGroup = {\n      name: groupName,\n      color: selectedColor,\n      notes: []\n    };\n    setNoteGroups([...noteGroups, newGroup]);\n    setIsPopupOpen(false); // Close the popup after creating the group\n  };\n\n  const openPopup = () => {\n    setIsPopupOpen(true);\n  };\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n  const createMessage = () => {\n    if (selectedContact) {\n      const newMessage = {\n        content: newMessageText,\n        sender: 'User',\n        timestamp: new Date().toLocaleString()\n      };\n      const updatedContacts = contacts.map(contact => {\n        if (contact.id === selectedContact.id) {\n          return {\n            ...contact,\n            notes: [...contact.notes, newMessage]\n          };\n        }\n        return contact;\n      });\n      setContacts(updatedContacts);\n      setNewMessageText('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chatApp,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.contacts,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Pocket Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: openPopup,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: createGroupIcon,\n            alt: \"Create Group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), \"Create Notes group\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), noteGroups.map(group => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.contact} ${selectedContact && selectedContact.name === group.name ? styles.selectedContact : ''}`,\n        onClick: () => setSelectedContact(group),\n        style: {\n          backgroundColor: group.color\n        },\n        children: group.name\n      }, group.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.messages,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: isPopupOpen ? styles.hiddenContent : '',\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: bgImage,\n          alt: bgImage,\n          className: styles.bgImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.pocketnotes,\n          children: \"Pocket Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.description,\n          children: [\"Send and receive messages without keeping your phone online.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), \"Use Pocket Notes on up to 4 linked devices and 1 mobile phone\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.FooterContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: lock,\n            alt: \"lock\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"end-to-end encrypted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), selectedContact && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.messageContainer,\n          children: selectedContact.notes.map((note, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${note.sender === 'User' ? styles.sentMessage : styles.receivedMessage}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.messageContent,\n              children: note.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.timestamp,\n              children: note.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), selectedContact && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.messageInput,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type your message here...\",\n            value: newMessageText,\n            onChange: e => setNewMessageText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: createMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), isPopupOpen && /*#__PURE__*/_jsxDEV(Popup, {\n        isPopupOpen: isPopupOpen,\n        closePopup: closePopup,\n        createGroup: handleCreateGroup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"IKRav+KaMXIfvr0msMNEOuMjjuw=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","styles","lock","bgImage","createGroupIcon","Popup","jsxDEV","_jsxDEV","ChatApp","_s","contacts","setContacts","selectedContact","setSelectedContact","newMessageText","setNewMessageText","noteGroups","setNoteGroups","isPopupOpen","setIsPopupOpen","handleCreateGroup","groupName","selectedColor","console","log","newGroup","name","color","notes","openPopup","closePopup","createMessage","newMessage","content","sender","timestamp","Date","toLocaleString","updatedContacts","map","contact","id","className","chatApp","children","fileName","_jsxFileName","lineNumber","columnNumber","button","onClick","src","alt","group","style","backgroundColor","messages","hiddenContent","pocketnotes","description","FooterContainer","messageContainer","note","index","sentMessage","receivedMessage","messageContent","messageInput","type","placeholder","value","onChange","e","target","createGroup","_c","$RefreshReg$"],"sources":["/home/lenon/notes-app/src/components/Chat.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styles from './ChatApp.module.css';\nimport lock from '../assets/Vector.png';\nimport bgImage from '../assets/bgimage.png';\nimport createGroupIcon from '../assets/+.png';\nimport Popup from './Popup';\n\nconst ChatApp = () => {\n  const [contacts, setContacts] = useState([]);\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [newMessageText, setNewMessageText] = useState('');\n  const [noteGroups, setNoteGroups] = useState([]); // State to manage note groups\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n\n  const handleCreateGroup = (groupName, selectedColor) => {\n    // Implement your logic to create a group here\n    // You can use this function to manage your groups in the App component\n    console.log(`Creating group: ${groupName} with color: ${selectedColor}`);\n    const newGroup = {\n      name: groupName,\n      color: selectedColor,\n      notes: [],\n    };\n    setNoteGroups([...noteGroups, newGroup]);\n    setIsPopupOpen(false); // Close the popup after creating the group\n  };\n\n  const openPopup = () => {\n    setIsPopupOpen(true);\n  };\n\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n\n  const createMessage = () => {\n    if (selectedContact) {\n      const newMessage = {\n        content: newMessageText,\n        sender: 'User',\n        timestamp: new Date().toLocaleString(),\n      };\n\n      const updatedContacts = contacts.map((contact) => {\n        if (contact.id === selectedContact.id) {\n          return {\n            ...contact,\n            notes: [...contact.notes, newMessage],\n          };\n        }\n        return contact;\n      });\n\n      setContacts(updatedContacts);\n      setNewMessageText('');\n    }\n  };\n\n  return (\n    <div className={styles.chatApp}>\n      <div className={styles.contacts}>\n        <div className=\"group-container\">\n          <h1>Pocket Notes</h1>\n          <button className={styles.button} onClick={openPopup}>\n            <img src={createGroupIcon} alt=\"Create Group\" />\n            Create Notes group\n          </button>\n        </div>\n        {noteGroups.map((group) => (\n          <div\n            key={group.name}\n            className={`${styles.contact} ${\n              selectedContact && selectedContact.name === group.name\n                ? styles.selectedContact\n                : ''\n            }`}\n            onClick={() => setSelectedContact(group)}\n            style={{ backgroundColor: group.color }}\n          >\n            {group.name}\n          </div>\n        ))}\n      </div>\n      <div className={styles.messages}>\n        <div className={isPopupOpen ? styles.hiddenContent : ''}>\n          <img src={bgImage} alt={bgImage} className={styles.bgImage} />\n          <p className={styles.pocketnotes}>Pocket Notes</p>\n          <p className={styles.description}>\n            Send and receive messages without keeping your phone online.\n            <br />\n            Use Pocket Notes on up to 4 linked devices and 1 mobile phone\n          </p>\n          <div className={styles.FooterContainer}>\n            <img src={lock} alt=\"lock\" />\n            <p>end-to-end encrypted</p>\n          </div>\n          {selectedContact && (\n            <div className={styles.messageContainer}>\n              {selectedContact.notes.map((note, index) => (\n                <div\n                  key={index}\n                  className={`${\n                    note.sender === 'User' ? styles.sentMessage : styles.receivedMessage\n                  }`}\n                >\n                  <div className={styles.messageContent}>{note.content}</div>\n                  <div className={styles.timestamp}>{note.timestamp}</div>\n                </div>\n              ))}\n            </div>\n          )}\n          {selectedContact && (\n            <div className={styles.messageInput}>\n              <input\n                type=\"text\"\n                placeholder=\"Type your message here...\"\n                value={newMessageText}\n                onChange={(e) => setNewMessageText(e.target.value)}\n              />\n              <button onClick={createMessage}>Send</button>\n            </div>\n          )}\n        </div>\n        {isPopupOpen && (\n          <Popup isPopupOpen={isPopupOpen} closePopup={closePopup} createGroup={handleCreateGroup} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatApp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}