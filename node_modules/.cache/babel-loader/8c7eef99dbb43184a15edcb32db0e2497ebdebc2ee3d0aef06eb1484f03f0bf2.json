{"ast":null,"code":"// const express = require('express');\n// const mongoose = require('mongoose');\n// const cookieParser = require('cookie-parser');\n// const dotenv = require('dotenv');\n// const jwt = require('jsonwebtoken');\n// const cors = require('cors');\n// const bcrypt = require('bcryptjs');\n// const User = require('./models/User');\n// const Message = require('./models/Message');\n// const ws = require('ws');\n// const fs = require('fs');\n\n// dotenv.config();\n// mongoose.connect(process.env.MONGO_URL, (err) => {\n//   if (err) throw err;\n// });\n// const jwtSecret = process.env.JWT_SECRET;\n// const bcryptSalt = bcrypt.genSaltSync(10);\n\n// const app = express();\n// app.use('/uploads', express.static(__dirname + '/uploads'));\n// app.use(express.json());\n// app.use(cookieParser());\n// app.use(cors({\n//   credentials: true,\n//   origin: process.env.CLIENT_URL,\n// }));\n\n// async function getUserDataFromRequest(req) {\n//   return new Promise((resolve, reject) => {\n//     const token = req.cookies?.token;\n//     if (token) {\n//       jwt.verify(token, jwtSecret, {}, (err, userData) => {\n//         if (err) throw err;\n//         resolve(userData);\n//       });\n//     } else {\n//       reject('no token');\n//     }\n//   });\n\n// }\n\n// app.get('/test', (req,res) => {\n//   res.json('test ok');\n// });\n\n// app.get('/messages/:userId', async (req,res) => {\n//   const {userId} = req.params;\n//   const userData = await getUserDataFromRequest(req);\n//   const ourUserId = userData.userId;\n//   const messages = await Message.find({\n//     sender:{$in:[userId,ourUserId]},\n//     recipient:{$in:[userId,ourUserId]},\n//   }).sort({createdAt: 1});\n//   res.json(messages);\n// });\n\n// app.get('/people', async (req,res) => {\n//   const users = await User.find({}, {'_id':1,username:1});\n//   res.json(users);\n// });\n\n// app.get('/profile', (req,res) => {\n//   const token = req.cookies?.token;\n//   if (token) {\n//     jwt.verify(token, jwtSecret, {}, (err, userData) => {\n//       if (err) throw err;\n//       res.json(userData);\n//     });\n//   } else {\n//     res.status(401).json('no token');\n//   }\n// });\n\n// app.post('/login', async (req,res) => {\n//   const {username, password} = req.body;\n//   const foundUser = await User.findOne({username});\n//   if (foundUser) {\n//     const passOk = bcrypt.compareSync(password, foundUser.password);\n//     if (passOk) {\n//       jwt.sign({userId:foundUser._id,username}, jwtSecret, {}, (err, token) => {\n//         res.cookie('token', token, {sameSite:'none', secure:true}).json({\n//           id: foundUser._id,\n//         });\n//       });\n//     }\n//   }\n// });\n\n// app.post('/logout', (req,res) => {\n//   res.cookie('token', '', {sameSite:'none', secure:true}).json('ok');\n// });\n\n// app.post('/register', async (req,res) => {\n//   const {username,password} = req.body;\n//   try {\n//     const hashedPassword = bcrypt.hashSync(password, bcryptSalt);\n//     const createdUser = await User.create({\n//       username:username,\n//       password:hashedPassword,\n//     });\n//     jwt.sign({userId:createdUser._id,username}, jwtSecret, {}, (err, token) => {\n//       if (err) throw err;\n//       res.cookie('token', token, {sameSite:'none', secure:true}).status(201).json({\n//         id: createdUser._id,\n//       });\n//     });\n//   } catch(err) {\n//     if (err) throw err;\n//     res.status(500).json('error');\n//   }\n// });\n\n// const server = app.listen(4040);\n\n// const wss = new ws.WebSocketServer({server});\n// wss.on('connection', (connection, req) => {\n\n//   function notifyAboutOnlinePeople() {\n//     [...wss.clients].forEach(client => {\n//       client.send(JSON.stringify({\n//         online: [...wss.clients].map(c => ({userId:c.userId,username:c.username})),\n//       }));\n//     });\n//   }\n\n//   connection.isAlive = true;\n\n//   connection.timer = setInterval(() => {\n//     connection.ping();\n//     connection.deathTimer = setTimeout(() => {\n//       connection.isAlive = false;\n//       clearInterval(connection.timer);\n//       connection.terminate();\n//       notifyAboutOnlinePeople();\n//       console.log('dead');\n//     }, 1000);\n//   }, 5000);\n\n//   connection.on('pong', () => {\n//     clearTimeout(connection.deathTimer);\n//   });\n\n//   // read username and id form the cookie for this connection\n//   const cookies = req.headers.cookie;\n//   if (cookies) {\n//     const tokenCookieString = cookies.split(';').find(str => str.startsWith('token='));\n//     if (tokenCookieString) {\n//       const token = tokenCookieString.split('=')[1];\n//       if (token) {\n//         jwt.verify(token, jwtSecret, {}, (err, userData) => {\n//           if (err) throw err;\n//           const {userId, username} = userData;\n//           connection.userId = userId;\n//           connection.username = username;\n//         });\n//       }\n//     }\n//   }\n\n//   connection.on('message', async (message) => {\n//     const messageData = JSON.parse(message.toString());\n//     const {recipient, text, file} = messageData;\n//     let filename = null;\n//     if (file) {\n//       console.log('size', file.data.length);\n//       const parts = file.name.split('.');\n//       const ext = parts[parts.length - 1];\n//       filename = Date.now() + '.'+ext;\n//       const path = __dirname + '/uploads/' + filename;\n//       const bufferData = new Buffer(file.data.split(',')[1], 'base64');\n//       fs.writeFile(path, bufferData, () => {\n//         console.log('file saved:'+path);\n//       });\n//     }\n//     if (recipient && (text || file)) {\n//       const messageDoc = await Message.create({\n//         sender:connection.userId,\n//         recipient,\n//         text,\n//         file: file ? filename : null,\n//       });\n//       console.log('created message');\n//       [...wss.clients]\n//         .filter(c => c.userId === recipient)\n//         .forEach(c => c.send(JSON.stringify({\n//           text,\n//           sender:connection.userId,\n//           recipient,\n//           file: file ? filename : null,\n//           _id:messageDoc._id,\n//         })));\n//     }\n//   });\n\n//   // notify everyone about online people (when someone connects)\n//   notifyAboutOnlinePeople();\n// });","map":{"version":3,"names":[],"sources":["/home/lenon/notes-app/src/index.js"],"sourcesContent":["// const express = require('express');\n// const mongoose = require('mongoose');\n// const cookieParser = require('cookie-parser');\n// const dotenv = require('dotenv');\n// const jwt = require('jsonwebtoken');\n// const cors = require('cors');\n// const bcrypt = require('bcryptjs');\n// const User = require('./models/User');\n// const Message = require('./models/Message');\n// const ws = require('ws');\n// const fs = require('fs');\n\n// dotenv.config();\n// mongoose.connect(process.env.MONGO_URL, (err) => {\n//   if (err) throw err;\n// });\n// const jwtSecret = process.env.JWT_SECRET;\n// const bcryptSalt = bcrypt.genSaltSync(10);\n\n// const app = express();\n// app.use('/uploads', express.static(__dirname + '/uploads'));\n// app.use(express.json());\n// app.use(cookieParser());\n// app.use(cors({\n//   credentials: true,\n//   origin: process.env.CLIENT_URL,\n// }));\n\n// async function getUserDataFromRequest(req) {\n//   return new Promise((resolve, reject) => {\n//     const token = req.cookies?.token;\n//     if (token) {\n//       jwt.verify(token, jwtSecret, {}, (err, userData) => {\n//         if (err) throw err;\n//         resolve(userData);\n//       });\n//     } else {\n//       reject('no token');\n//     }\n//   });\n\n// }\n\n// app.get('/test', (req,res) => {\n//   res.json('test ok');\n// });\n\n// app.get('/messages/:userId', async (req,res) => {\n//   const {userId} = req.params;\n//   const userData = await getUserDataFromRequest(req);\n//   const ourUserId = userData.userId;\n//   const messages = await Message.find({\n//     sender:{$in:[userId,ourUserId]},\n//     recipient:{$in:[userId,ourUserId]},\n//   }).sort({createdAt: 1});\n//   res.json(messages);\n// });\n\n// app.get('/people', async (req,res) => {\n//   const users = await User.find({}, {'_id':1,username:1});\n//   res.json(users);\n// });\n\n// app.get('/profile', (req,res) => {\n//   const token = req.cookies?.token;\n//   if (token) {\n//     jwt.verify(token, jwtSecret, {}, (err, userData) => {\n//       if (err) throw err;\n//       res.json(userData);\n//     });\n//   } else {\n//     res.status(401).json('no token');\n//   }\n// });\n\n// app.post('/login', async (req,res) => {\n//   const {username, password} = req.body;\n//   const foundUser = await User.findOne({username});\n//   if (foundUser) {\n//     const passOk = bcrypt.compareSync(password, foundUser.password);\n//     if (passOk) {\n//       jwt.sign({userId:foundUser._id,username}, jwtSecret, {}, (err, token) => {\n//         res.cookie('token', token, {sameSite:'none', secure:true}).json({\n//           id: foundUser._id,\n//         });\n//       });\n//     }\n//   }\n// });\n\n// app.post('/logout', (req,res) => {\n//   res.cookie('token', '', {sameSite:'none', secure:true}).json('ok');\n// });\n\n// app.post('/register', async (req,res) => {\n//   const {username,password} = req.body;\n//   try {\n//     const hashedPassword = bcrypt.hashSync(password, bcryptSalt);\n//     const createdUser = await User.create({\n//       username:username,\n//       password:hashedPassword,\n//     });\n//     jwt.sign({userId:createdUser._id,username}, jwtSecret, {}, (err, token) => {\n//       if (err) throw err;\n//       res.cookie('token', token, {sameSite:'none', secure:true}).status(201).json({\n//         id: createdUser._id,\n//       });\n//     });\n//   } catch(err) {\n//     if (err) throw err;\n//     res.status(500).json('error');\n//   }\n// });\n\n// const server = app.listen(4040);\n\n// const wss = new ws.WebSocketServer({server});\n// wss.on('connection', (connection, req) => {\n\n//   function notifyAboutOnlinePeople() {\n//     [...wss.clients].forEach(client => {\n//       client.send(JSON.stringify({\n//         online: [...wss.clients].map(c => ({userId:c.userId,username:c.username})),\n//       }));\n//     });\n//   }\n\n//   connection.isAlive = true;\n\n//   connection.timer = setInterval(() => {\n//     connection.ping();\n//     connection.deathTimer = setTimeout(() => {\n//       connection.isAlive = false;\n//       clearInterval(connection.timer);\n//       connection.terminate();\n//       notifyAboutOnlinePeople();\n//       console.log('dead');\n//     }, 1000);\n//   }, 5000);\n\n//   connection.on('pong', () => {\n//     clearTimeout(connection.deathTimer);\n//   });\n\n//   // read username and id form the cookie for this connection\n//   const cookies = req.headers.cookie;\n//   if (cookies) {\n//     const tokenCookieString = cookies.split(';').find(str => str.startsWith('token='));\n//     if (tokenCookieString) {\n//       const token = tokenCookieString.split('=')[1];\n//       if (token) {\n//         jwt.verify(token, jwtSecret, {}, (err, userData) => {\n//           if (err) throw err;\n//           const {userId, username} = userData;\n//           connection.userId = userId;\n//           connection.username = username;\n//         });\n//       }\n//     }\n//   }\n\n//   connection.on('message', async (message) => {\n//     const messageData = JSON.parse(message.toString());\n//     const {recipient, text, file} = messageData;\n//     let filename = null;\n//     if (file) {\n//       console.log('size', file.data.length);\n//       const parts = file.name.split('.');\n//       const ext = parts[parts.length - 1];\n//       filename = Date.now() + '.'+ext;\n//       const path = __dirname + '/uploads/' + filename;\n//       const bufferData = new Buffer(file.data.split(',')[1], 'base64');\n//       fs.writeFile(path, bufferData, () => {\n//         console.log('file saved:'+path);\n//       });\n//     }\n//     if (recipient && (text || file)) {\n//       const messageDoc = await Message.create({\n//         sender:connection.userId,\n//         recipient,\n//         text,\n//         file: file ? filename : null,\n//       });\n//       console.log('created message');\n//       [...wss.clients]\n//         .filter(c => c.userId === recipient)\n//         .forEach(c => c.send(JSON.stringify({\n//           text,\n//           sender:connection.userId,\n//           recipient,\n//           file: file ? filename : null,\n//           _id:messageDoc._id,\n//         })));\n//     }\n//   });\n\n//   // notify everyone about online people (when someone connects)\n//   notifyAboutOnlinePeople();\n// }); "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}